
#SHELL:=/bin/bash

include version.mk


ifneq ($(shell sw_vers -productVersion | egrep '^10\.(0|1|2|3|4|5)(\.[0-9]+)?$$'),)
ISYSROOT=-isysroot /Developer/SDKs/MacOSX10.4u.sdk
LINK_EXTRAS=
else
SDK=$(shell xcodebuild -sdk macosx -version | grep '^Path:' | sed 's/Path: \(.*\)/\1/')
ISYSROOT=-isysroot $(SDK)
LINK_EXTRAS=-F/System/Library/PrivateFrameworks \
    -weak_framework MultitouchSupport
endif

CHUCK_SRC_DIR=chuck/src
LANGUAGE=English

OSX_DIR=macosx
BIN_DIR=macosx
INSTALL_DIR=/Applications

# compilation/linking presets
CC=gcc
CXX=g++
LEX=flex
YACC=bison

ifneq ($(shell sw_vers -productVersion | egrep '^10\.[0123456](\.[0-9]+)?$$'),)
CC=clang
CXX=clang++
endif

BUNDLE_FRAMEWORKS=PSMTabBarControl
BUNDLE_FRAMEWORKS_DIR=$(OSX_DIR)/Frameworks

INCLUDES=-I$(CHUCK_SRC_DIR)/core -I$(CHUCK_SRC_DIR)/host -I$(CHUCK_SRC_DIR)/host/RtAudio \
    -I$(OSX_DIR) -I$(OSX_DIR)/UliKit -I. -F$(BUNDLE_FRAMEWORKS_DIR)
CFLAGS+=-D__MACOSX_CORE__ -c -DGCC_FAST_OBJC_DISPATCH $(INCLUDES) \
    -mmacosx-version-min=10.9 $(ISYSROOT) -DENV_MA_VERSION="\"$(VERSION)\""

FRAMEWORKS=Cocoa CoreAudio CoreMIDI CoreFoundation Carbon IOKit Security AVFoundation
LIBS=$(addprefix -framework ,$(FRAMEWORKS)) \
    $(LINK_EXTRAS) -lc++ -lm
LDFLAGS=$(LIBS) -mmacosx-version-min=10.9 $(ISYSROOT)
LDFLAGS_MA=-F$(BUNDLE_FRAMEWORKS_DIR) -framework PSMTabBarControl -rpath "@executable_path/../Frameworks"

ARCHOPTS=$(addprefix -arch ,$(ARCHS))

SF_SRC=core/util_sndfile.c

ifneq ($(CHUCK_DEBUG),)
CFLAGS+= -g
else
CFLAGS+= -O3
endif

ifneq ($(CHUCK_STRICT),)
CFLAGS+= -Wall
endif

ifneq ($(filter SPENCER,$(MA_SPECIAL)),)
CFLAGS+= -DSPENCER
FRAMEWORKS+=QuartzCore
endif

#-----------------------------------------------------------------------------
# by default, ChucK uses a pre-configured libsndfile...
# uncomment the next 3 lines to use libsndfile on your system
#-----------------------------------------------------------------------------
#CFLAGS+= -D__CK_SNDFILE_NATIVE__
#LIBS+= -lsndfile
#SF_SRC=

CFLAGSDEPEND?=$(patsubst -arch %,,$(CFLAGS))

DIST_DIR=miniAudicle-$(VERSION)

NOTES_DIR=../notes
NOTES=COPYING LGPL INSTALL BUGS VERSIONS
NOTES:=$(addprefix $(NOTES_DIR)/,$(NOTES))

DOC_DIR=../docs/web
DOCS=index.html maui_api.html miniAudicle.css
DOCS:=$(addprefix $(DOC_DIR)/,$(DOCS))

DOC_IMAGE_DIR=../docs/web/images
DOC_IMAGES=$(wildcard $(DOC_IMAGE_DIR)/*)

EXAMPLES_DIR=../test
EXAMPLES=slide01.ck slide02.ck slide03.ck led01.ck view01.ck mand-o-ui.ck \
         mode-o-ui.ck gauge01.ck gauge02.ck
EXAMPLES:=$(addprefix $(EXAMPLES_DIR)/,$(EXAMPLES))

CHUCK_FULL_SRC_DIR=../../chuck/trunk/src
CHUCK_MANUAL_DIR=$(CHUCK_FULL_SRC_DIR)/../doc/manual
CHUCK_MANUAL=$(CHUCK_MANUAL_DIR)/ChucK_manual.pdf

CHUCK_CSRCS= $(CHUCK_SRC_DIR)/core/util_network.c \
    $(CHUCK_SRC_DIR)/core/util_raw.c $(CHUCK_SRC_DIR)/core/util_xforms.c \
    $(CHUCK_SRC_DIR)/$(SF_SRC) $(CHUCK_SRC_DIR)/core/chuck.tab.c \
    $(CHUCK_SRC_DIR)/core/chuck.yy.c

CHUCK_CXXSRCS= \
    $(CHUCK_SRC_DIR)/core/chuck.cpp \
    $(CHUCK_SRC_DIR)/core/util_math.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_absyn.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_parse.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_errmsg.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_frame.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_symbol.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_table.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_vm.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_instr.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_scan.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_type.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_emit.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_compile.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_dl.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_oo.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_lang.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_ugen.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_shell.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_otf.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_stats.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_io.cpp \
    $(CHUCK_SRC_DIR)/host/chuck_console.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_globals.cpp \
    $(CHUCK_SRC_DIR)/core/chuck_carrier.cpp \
    $(CHUCK_SRC_DIR)/core/hidio_sdl.cpp \
    $(CHUCK_SRC_DIR)/core/midiio_rtmidi.cpp \
    $(CHUCK_SRC_DIR)/host/RtAudio/RtAudio.cpp \
    $(CHUCK_SRC_DIR)/core/rtmidi.cpp \
    $(CHUCK_SRC_DIR)/core/ugen_osc.cpp \
    $(CHUCK_SRC_DIR)/core/ugen_filter.cpp \
    $(CHUCK_SRC_DIR)/core/ugen_stk.cpp \
    $(CHUCK_SRC_DIR)/core/ugen_xxx.cpp \
    $(CHUCK_SRC_DIR)/core/uana_extract.cpp \
    $(CHUCK_SRC_DIR)/core/uana_xform.cpp \
    $(CHUCK_SRC_DIR)/core/ulib_ai.cpp \
    $(CHUCK_SRC_DIR)/core/ulib_doc.cpp \
    $(CHUCK_SRC_DIR)/core/ulib_machine.cpp \
    $(CHUCK_SRC_DIR)/core/ulib_math.cpp \
    $(CHUCK_SRC_DIR)/core/ulib_std.cpp \
    $(CHUCK_SRC_DIR)/core/ulib_opsc.cpp \
    $(CHUCK_SRC_DIR)/core/util_buffers.cpp \
    $(CHUCK_SRC_DIR)/core/util_console.cpp \
    $(CHUCK_SRC_DIR)/core/util_hid.cpp \
    $(CHUCK_SRC_DIR)/core/util_opsc.cpp \
    $(CHUCK_SRC_DIR)/core/util_platforms.cpp \
    $(CHUCK_SRC_DIR)/core/util_serial.cpp \
    $(CHUCK_SRC_DIR)/core/util_string.cpp \
    $(CHUCK_SRC_DIR)/core/util_thread.cpp \
    $(CHUCK_SRC_DIR)/host/chuck_audio.cpp

LO_CSRCS+= lo/address.c lo/blob.c lo/bundle.c lo/message.c lo/method.c \
    lo/pattern_match.c lo/send.c lo/server.c lo/server_thread.c lo/timetag.c
LO_CSRCS:=$(addprefix $(CHUCK_SRC_DIR)/core/,$(LO_CSRCS))

LO_COBJS=$(LO_CSRCS:.c=.o)

LO_CFLAGS=-DHAVE_CONFIG_H -I.

CHUCK_BIN_CXXSRCS=$(CHUCK_SRC_DIR)/host/chuck_main.cpp

CHUCK_COBJS=$(CHUCK_CSRCS:.c=.o)
CHUCK_CXXOBJS=$(CHUCK_CXXSRCS:.cpp=.o)
CHUCK_OBJS+=$(CHUCK_COBJS) $(CHUCK_CXXOBJS) $(LO_COBJS)

CHUCK_BIN_CXXOBJS=$(CHUCK_BIN_CXXSRCS:.cpp=.o)
CHUCK_BIN_OBJS=$(CHUCK_OBJS) $(CHUCK_BIN_CXXOBJS)

CSRCS+=
CXXSRCS+= miniAudicle.cpp \
    miniAudicle_shell.cpp \
    miniAudicle_import.cpp \
    miniAudicle_ui_elements.cpp \
    util_rterror.cpp
OBJCSRCS+= $(OSX_DIR)/main.m \
    $(OSX_DIR)/BLAuthentication.m \
    $(OSX_DIR)/UliKit/UKFileWatcher.m \
    $(OSX_DIR)/UliKit/UKFSEventsWatcher.m \
    $(OSX_DIR)/mAExportAsViewController.m \
    $(OSX_DIR)/mAExportProgressViewController.m \
    $(OSX_DIR)/NSPanel+ButtonTag.m
OBJCXXSRCS+= $(OSX_DIR)/miniAudicleController.mm \
	$(OSX_DIR)/miniAudicleVMMonitor.mm \
	$(OSX_DIR)/miniAudicleDocument.mm \
	$(OSX_DIR)/miniAudicleConsoleMonitor.mm \
	$(OSX_DIR)/miniAudicleShellController.mm  \
	$(OSX_DIR)/mAConsoleMonitorView.mm \
	$(OSX_DIR)/NumberedTextView.mm \
	$(OSX_DIR)/miniAudicleShellTextView.mm \
	$(OSX_DIR)/miniAudicle_ui_elements.mm \
	$(OSX_DIR)/miniAudiclePreferencesController.mm \
	$(OSX_DIR)/mABrowserController.mm \
	$(OSX_DIR)/mASyntaxHighlighter.mm \
	$(OSX_DIR)/mAChuginManager.mm \
	$(OSX_DIR)/mADocumentViewController.mm \
	$(OSX_DIR)/mAMultiDocWindowController.mm \
	$(OSX_DIR)/mARecordSessionController.mm \
	$(OSX_DIR)/NSString+STLString.mm \
	$(OSX_DIR)/mAExampleBrowser.mm \
	$(OSX_DIR)/mADocumentExporter.mm

COBJS=$(CSRCS:.c=.o)
CXXOBJS=$(CXXSRCS:.cpp=.o)
OBJCOBJS=$(OBJCSRCS:.m=.o)
OBJCXXOBJS=$(OBJCXXSRCS:.mm=.o)
OBJS=$(COBJS) $(CXXOBJS) $(OBJCOBJS) $(OBJCXXOBJS)

# example files
CK_EXAMPLES_DIR=chuck/examples
CK_EXAMPLES=$(shell find $(CK_EXAMPLES_DIR) -type f -not -name \\\.* -exec echo -n {} '' \;)
CK_EXAMPLES_IN_BUNDLE=$(patsubst $(CK_EXAMPLES_DIR)/%,$(BIN_DIR)/miniAudicle.app/Contents/Resources/examples/%,$(CK_EXAMPLES))

# place all images in macosx/icon here
IMAGES=led-red.png led-green.png led-blue.png led-off.png \
       add.png remove.png replace.png removeall.png removelast.png error.png \
       miniAudicle.icns ck.icns Thumb9.png lock.png record.png stop.png \
       folder.png ckmini.png

IMAGES:=$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/Resources/,$(IMAGES))

INFO_PLIST=$(OSX_DIR)/Info.plist
INFO_PLIST_IN_BUNDLE=$(BIN_DIR)/miniAudicle.app/Contents/Info.plist

BUNDLE_DATA=PkgInfo

BUNDLE_DATA:=$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/,$(BUNDLE_DATA))

BUNDLE_FRAMEWORKS_IN_BUNDLE=$(addsuffix .framework,$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/Frameworks/,$(BUNDLE_FRAMEWORKS)))

NIBS_BASE=miniAudicle mADocumentView mADocumentWindow mARecordSession \
    mAExportProgress mAExportAs mAExampleBrowser
XIBS=$(addprefix $(OSX_DIR)/Resources/$(LANGUAGE).lproj/,$(addsuffix .xib,$(NIBS_BASE)))
NIBS=$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/,$(addsuffix .nib,$(NIBS_BASE)) InfoPlist.strings)

CHUCK_SCRIPTS=record.ck recordvu.ck export.ck
CHUCK_SCRIPTS_DIR=$(OSX_DIR)/Chuck\ Scripts
CHUCK_SCRIPTS_IN_BUNDLE=$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/Resources/,$(CHUCK_SCRIPTS))

CHUCK_IN_BUNDLE=$(BIN_DIR)/miniAudicle.app/Contents/Resources/chuck

OGGENC=$(OSX_DIR)/util/oggenc
OGGENC_IN_BUNDLE=$(BIN_DIR)/miniAudicle.app/Contents/Resources/oggenc

CERT=Developer ID Application: Spencer Salazar (9GU9FHJ3JC)

.PHONY: miniAudicle
miniAudicle: $(BIN_DIR)/miniAudicle.app/Contents/MacOS/miniAudicle $(IMAGES) \
    $(NIBS) $(BUNDLE_DATA) $(BUNDLE_FRAMEWORKS_IN_BUNDLE) \
    $(CHUCK_SCRIPTS_IN_BUNDLE) $(CHUCK_IN_BUNDLE) $(CK_EXAMPLES_IN_BUNDLE) \
    $(INFO_PLIST_IN_BUNDLE) $(OGGENC_IN_BUNDLE)

$(BIN_DIR)/miniAudicle.app/Contents/MacOS/miniAudicle: $(OBJS) $(CHUCK_OBJS) $(BIN_DIR)/miniAudicle.app/Contents/MacOS/
	$(CXX) -o $(BIN_DIR)/miniAudicle.app/Contents/MacOS/miniAudicle $(OBJS) $(CHUCK_OBJS) $(LDFLAGS) $(LDFLAGS_MA) $(ARCHOPTS)

$(BIN_DIR)/miniAudicle.app/Contents/MacOS/:
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/MacOS/

$(IMAGES): $(BIN_DIR)/miniAudicle.app/Contents/Resources/%: $(OSX_DIR)/icon/%
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/Resources/
	cp $< $@
	touch $(BIN_DIR)/miniAudicle.app

$(BUNDLE_DATA): $(BIN_DIR)/miniAudicle.app/Contents/%: $(OSX_DIR)/%
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/
	cp $< $@
	touch $(BIN_DIR)/miniAudicle.app

$(INFO_PLIST_IN_BUNDLE): $(INFO_PLIST) version.mk
	sed s/$$\(ENV_MA_VERSION\)/$(VERSION)/g $< > $@

$(BUNDLE_FRAMEWORKS_IN_BUNDLE): $(BIN_DIR)/miniAudicle.app/Contents/Frameworks/%: $(OSX_DIR)/Frameworks/%
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/Frameworks
	cp -a $< $@
	touch $(BIN_DIR)/miniAudicle.app

$(CHUCK_SCRIPTS_IN_BUNDLE): $(addprefix $(CHUCK_SCRIPTS_DIR)/,$(CHUCK_SCRIPTS))
	cp $(addprefix $(CHUCK_SCRIPTS_DIR)/,$(CHUCK_SCRIPTS)) $(BIN_DIR)/miniAudicle.app/Contents/Resources/

$(CHUCK_IN_BUNDLE): $(CHUCK_BIN_OBJS)
	mkdir -p $(dir $(CHUCK_IN_BUNDLE))
	$(CXX) -o $(CHUCK_IN_BUNDLE) $(CHUCK_BIN_OBJS) $(LDFLAGS) $(ARCHOPTS)

$(OGGENC_IN_BUNDLE): $(OGGENC)
	mkdir -p $(dir $(OGGENC_IN_BUNDLE))
	cp $(OGGENC) $(OGGENC_IN_BUNDLE)

$(filter %.strings,$(NIBS)): $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/%: $(OSX_DIR)/Resources/$(LANGUAGE).lproj/%
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/
	cp $< $@

$(filter %.nib,$(NIBS)): $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/%.nib: $(OSX_DIR)/Resources/$(LANGUAGE).lproj/%.xib
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/
	ibtool --errors --warnings --notices --output-format human-readable-text --compile $@ $<

$(CK_EXAMPLES_IN_BUNDLE): $(BIN_DIR)/miniAudicle.app/Contents/Resources/examples/%: $(CK_EXAMPLES_DIR)/%
	mkdir -p $(dir $@)
	cp $< $(dir $@)

# build the core chuck code
$(CHUCK_COBJS): %.o: %.c
	$(CC) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CC) -MM $(CFLAGSDEPEND) $< > $*.d

$(CHUCK_CXXOBJS): %.o: %.cpp
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d

$(CHUCK_BIN_CXXOBJS): %.o: %.cpp
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d

$(LO_COBJS): %.o: %.c
	$(CC) $(CFLAGS) $(LO_CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CC) -MM -MQ "$@" $(CFLAGSDEPEND) $(LO_CFLAGS) $< > $*.d

$(CHUCK_SRC_DIR)/core/chuck.tab.c $(CHUCK_SRC_DIR)/core/chuck.tab.h: $(CHUCK_SRC_DIR)/core/chuck.y
	$(YACC) -dv -b $(CHUCK_SRC_DIR)/core/chuck $(CHUCK_SRC_DIR)/core/chuck.y

$(CHUCK_SRC_DIR)/core/chuck.yy.c: $(CHUCK_SRC_DIR)/core/chuck.lex
	$(LEX) -o$(CHUCK_SRC_DIR)/core/chuck.yy.c $(CHUCK_SRC_DIR)/core/chuck.lex

# now build miniAudicle files
ifeq ($(shell git rev-parse 2>&1),)
GITREV_DEP=git-rev.h
else
GITREV_DEP=
endif

miniAudicle.o: $(GITREV_DEP)

gitrev_FORCE:

git-rev.h: gitrev_FORCE
	echo "#define GIT_REVISION \""`git rev-parse --short HEAD`"\"" | cmp -s git-rev.h || \
        echo "#define GIT_REVISION \""`git rev-parse --short HEAD`"\"" > git-rev.h

$(COBJS): %.o: %.c
	$(CC) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CC) -MM $(CFLAGSDEPEND) $< > $*.d

$(CXXOBJS): %.o: %.cpp
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d

$(OBJCOBJS): %.o: %.m
	$(CC) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CC) -MM $(CFLAGSDEPEND) $< > $*.d

$(OBJCXXOBJS): %.o: %.mm
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d


.PHONY: clean
clean:
	rm -rf $(OBJS) $(OBJS:.o=.d) $(CHUCK_OBJS) $(CHUCK_OBJS:.o=.d) \
        $(addprefix $(CHUCK_SRC_DIR)/,chuck.tab.h chuck.tab.c chuck.yy.c) \
        $(CHUCK_BIN_OBJS) $(CHUCK_BIN_OBJS:.o=.d) \
        $(BIN_DIR)/miniAudicle.app $(DIST_DIR).dmg \
        git-rev.h
	make -C $(CHUCK_SRC_DIR) clean

.PHONY: clean-all
clean-all:
	rm -rf *.o $(OSX_DIR)/*.o $(BIN_DIR)/miniAudicle.app $(DIST_DIR).dmg
	make -C $(CHUCK_SRC_DIR) clean

.PHONY: install
install: miniAudicle
	rm -rf $(INSTALL_DIR)/miniAudicle.app
	cp -af $(BIN_DIR)/miniAudicle.app $(INSTALL_DIR)/

.PHONY: dist
dist: miniAudicle
	rm -rf $(DIST_DIR) miniAudicle-$(VERSION).dmg
	mkdir $(DIST_DIR)
	mkdir $(DIST_DIR)/documentation
	mkdir $(DIST_DIR)/documentation/images
#	mkdir $(DIST_DIR)/documentation/examples
#	mkdir $(DIST_DIR)/documentation/examples/ui
#	ln -s documentation/examples $(DIST_DIR)/
	cp -a $(BIN_DIR)/miniAudicle.app $(NOTES) $(DIST_DIR)/
# sign code
	codesign -s "$(CERT)" $(DIST_DIR)/miniAudicle.app
	cp -r $(DOCS) $(DIST_DIR)/documentation/
	cp -r $(DOC_IMAGES) $(DIST_DIR)/documentation/images/
#	cp -r $(EXAMPLES) $(DIST_DIR)/documentation/examples/ui
#	cp -r $(CHUCK_SRC_DIR)/examples/* $(DIST_DIR)/documentation/examples/
#	make -C $(CHUCK_MANUAL_DIR) > /dev/null
	cp -r $(CHUCK_MANUAL) $(DIST_DIR)/documentation/
	rm -rf `find $(DIST_DIR)/ -name .DS_Store` `find $(DIST_DIR)/ -name .svn`
	hdiutil create -srcfolder $(DIST_DIR) miniAudicle-$(VERSION).dmg -format UDZO -imagekey zlib-level=9
	rm -rf $(DIST_DIR)/
